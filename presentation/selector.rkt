#lang slideshow

(require "fsharp-code.rkt")
(require "clojure-code.rkt")

(provide selector)
(provide declarations)
(provide bad-naming)
(provide good-naming)
(provide statement)
(provide expression)
(provide mutable-state)
(provide non-mutable-state)
(provide non-exhaustive-1)
(provide exhaustive-1)
(provide non-exhaustive-2)
(provide exhaustive-2)
(provide intermediate-variables)
(provide non-intermediate-variables)
(provide non-intermediate-variables-alternate)
(provide justification)
(provide recursion)
(provide non-recursion)
(provide non-recursion-alternate)
(provide non-generic-building-block)
(provide generic-building-block)
(provide generic-building-block-alternate)
(provide side-effect)
(provide side-effect-injection)
(provide side-effect-out)
(provide side-effect-out-alternate)
(provide non-sequence)
(provide sequence)
(provide multiple-arguments)
(provide single-argument)
(provide multiple-arguments-2)
(provide composition)
(provide piping)

(define declarations null)
(define bad-naming null)
(define good-naming null)
(define statement null)
(define expression null)
(define mutable-state null)
(define non-mutable-state null)
(define non-exhaustive-1 null)
(define exhaustive-1 null)
(define non-exhaustive-2 null)
(define exhaustive-2 null)
(define intermediate-variables null)
(define non-intermediate-variables null)
(define non-intermediate-variables-alternate null)
(define justification null)
(define recursion null)
(define non-recursion null)
(define non-recursion-alternate null)
(define non-generic-building-block null)
(define generic-building-block null)
(define generic-building-block-alternate null)
(define side-effect null)
(define side-effect-injection null)
(define side-effect-out null)
(define side-effect-out-alternate null)
(define non-sequence null)
(define sequence null)
(define multiple-arguments null)
(define single-argument null)
(define multiple-arguments-2 null)
(define composition null)
(define piping null)

(define (selector language)
  (if (= language 1)
      (begin
        (set! declarations declarations-fsharp)
        (set! bad-naming bad-naming-fsharp)
        (set! good-naming good-naming-fsharp)
        (set! statement statement-fsharp)
        (set! expression expression-fsharp)
        (set! mutable-state mutable-state-fsharp)
        (set! non-mutable-state non-mutable-state-fsharp)
        (set! non-exhaustive-1 non-exhaustive-1-fsharp)
        (set! exhaustive-1 exhaustive-1-fsharp)
        (set! non-exhaustive-2 non-exhaustive-2-fsharp)
        (set! exhaustive-2 exhaustive-2-fsharp)
        (set! intermediate-variables intermediate-variables-fsharp)
        (set! non-intermediate-variables non-intermediate-variables-fsharp)
        (set! non-intermediate-variables-alternate non-intermediate-variables-alternate-fsharp)
        (set! recursion recursion-fsharp)
        (set! non-recursion non-recursion-fsharp)
        (set! non-recursion-alternate non-recursion-alternate-fsharp)
        (set! non-generic-building-block non-generic-building-block-fsharp)
        (set! generic-building-block generic-building-block-fsharp)
        (set! generic-building-block-alternate generic-building-block-alternate-fsharp)
        (set! side-effect side-effect-fsharp)
        (set! side-effect-injection side-effect-injection-fsharp)
        (set! side-effect-out side-effect-out-fsharp)
        (set! side-effect-out-alternate side-effect-out-alternate-fsharp)
        (set! non-sequence non-sequence-fsharp)
        (set! sequence sequence-fsharp)
        (set! multiple-arguments multiple-arguments-fsharp)
        (set! single-argument single-argument-fsharp)
        (set! multiple-arguments-2 multiple-arguments-2-fsharp)
        (set! composition composition-fsharp))
      (begin
        (set! declarations declarations-clojure)
        (set! bad-naming bad-naming-clojure)
        (set! good-naming good-naming-clojure)
        (set! statement statement-clojure)
        (set! expression expression-clojure)
        (set! mutable-state mutable-state-clojure)
        (set! non-mutable-state non-mutable-state-clojure)
        (set! non-exhaustive-1 non-exhaustive-1-clojure)
        (set! exhaustive-1 exhaustive-1-clojure)
        (set! non-exhaustive-2 non-exhaustive-2-clojure)
        (set! exhaustive-2 exhaustive-2-clojure)
        (set! intermediate-variables intermediate-variables-clojure)
        (set! non-intermediate-variables non-intermediate-variables-clojure)
        (set! non-intermediate-variables-alternate non-intermediate-variables-alternate-clojure)
        (set! justification justification-clojure)
        (set! recursion recursion-clojure)
        (set! non-recursion non-recursion-clojure)
        (set! non-recursion-alternate non-recursion-alternate-clojure)
        (set! non-generic-building-block non-generic-building-block-clojure)
        (set! generic-building-block generic-building-block-clojure)
        (set! generic-building-block-alternate generic-building-block-alternate-clojure)
        (set! side-effect side-effect-clojure)
        (set! side-effect-injection side-effect-injection-clojure)
        (set! side-effect-out side-effect-out-clojure)
        (set! side-effect-out-alternate side-effect-out-alternate-clojure)
        (set! non-sequence non-sequence-clojure)
        (set! sequence sequence-clojure)
        (set! multiple-arguments multiple-arguments-clojure)
        (set! single-argument single-argument-clojure)
        (set! multiple-arguments-2 multiple-arguments-2-clojure)
        (set! composition composition-clojure)
        (set! piping piping-clojure))))
